version: '3.8'

services:
  
  mongo:
    image: mongo:7.0.2
    container_name: mongodb
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - mongo-data:/data/db

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - '${RABBITMQ_AMQP_PORT}:5672'
      - '${RABBITMQ_MGMT_PORT}:15672'
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '${REDIS_PORT}:6379'
    volumes:
      - redis-data:/data

# To do: Ensure all crypto_service share the same volume or use AWS KMS to fetch key
  crypto_service:
    image: crypto_service
    build:
      context: ./crypto_service
      dockerfile: Dockerfile
    ports:
      - '${CRYPTO_PORT}:7070'

  auth_service:
    image: auth_service
    build:
      context: ./auth_service
      dockerfile: Dockerfile
    ports:
      - '${AUTH_PORT}:5000'
    environment:
      AUTH_KMS_ACCESS_KEY: ${AUTH_KMS_ACCESS_KEY}
      AUTH_KMS_SECRET_KEY: ${AUTH_KMS_SECRET_KEY}
      AUTH_KMS_REGION: ${AUTH_KMS_REGION}
      AUTH_APP_CREDENTIALS_KEYID: ${AUTH_APP_CREDENTIALS_KEYID}
      OAUTHLIB_INSECURE_TRANSPORT: ${OAUTHLIB_INSECURE_TRANSPORT}
      AUTH_PORT: ${AUTH_PORT}
      MONGO_ADDRESS: mongo
      MONGO_PORT: 27017
      SESSION_SECRET: ${SESSION_SECRET}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: redis
      CRYPTO_PORT: 7070
      CRYPTO_HOST: crypto_service
      ENCRYPTED_GOOGLE_APP_CRED: ${ENCRYPTED_GOOGLE_APP_CRED}
    depends_on:
      - redis
      - crypto_service
      - mongo
  
  gateway_service:
    image: gateway_service
    build:
      context: ./gateway_service
      dockerfile: Dockerfile
    ports:
      - '${GATEWAY_PORT}:8080'
    environment:
      GATEWAY_PORT: ${GATEWAY_PORT} 
      AUTH_ADDRESS: ${AUTH_ADDRESS} 
      AUTH_PORT: 5000
      MONGO_ADDRESS: mongo
      MONGO_PORT: 27017
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: redis
      CRYPTO_PORT: 7070
      CRYPTO_HOST: crypto_service
      MSG_PORT: ${MSG_PORT}
      MSG_HOST: msg_service

    depends_on:
      - redis
      - mongo

  msg_service:
    image: msg_service
    build:
      context: ./msg_service
      dockerfile: Dockerfile
    ports:
      - '${MSG_PORT}:9989'
    environment:
      MSG_PORT: ${MSG_PORT}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_AMQP_PORT: ${RABBITMQ_AMQP_PORT}
      RABBITMQ_MGMT_PORT: ${RABBITMQ_MGMT_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      AUTH_KMS_ACCOUNT_ID: ${AUTH_KMS_ACCOUNT_ID}
      AUTH_KMS_ACCESS_KEY: ${AUTH_KMS_ACCESS_KEY}
      AUTH_KMS_SECRET_KEY: ${AUTH_KMS_SECRET_KEY}
      AUTH_KMS_REGION: ${AUTH_KMS_REGION}
      MSG_APP_MAC_KEYID: ${MSG_APP_MAC_KEYID}
    depends_on:
      - rabbitmq
  
  event_service:
    image: event_service
    build:
      context: ./event_service
      dockerfile: Dockerfile
    environment:
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_AMQP_PORT: ${RABBITMQ_AMQP_PORT}
      RABBITMQ_MGMT_PORT: ${RABBITMQ_MGMT_PORT}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      AUTH_KMS_ACCOUNT_ID: ${AUTH_KMS_ACCOUNT_ID}
      AUTH_KMS_ACCESS_KEY: ${AUTH_KMS_ACCESS_KEY}
      AUTH_KMS_SECRET_KEY: ${AUTH_KMS_SECRET_KEY}
      AUTH_KMS_REGION: ${AUTH_KMS_REGION}
      MSG_APP_MAC_KEYID: ${MSG_APP_MAC_KEYID}
      CRYPTO_HOST: crypto_service
      CRYPTO_PORT: ${CRYPTO_PORT}
      MSG_HOST: msg_service
      MSG_PORT: ${MSG_PORT}
      MONGO_ADDRESS: mongo
      MONGO_PORT: ${MONGO_PORT}
    depends_on:
      - rabbitmq
      - mongo

volumes:
  redis-data:
    driver: local
  mongo-data:
    driver: local